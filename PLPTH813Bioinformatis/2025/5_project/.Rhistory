install.packages("learnr")
shiny::runApp('test')
runApp('Documents/shiny/test')
6*4*4*2*2*4*4*4*3*4*6
2*3*2*2*2*4*4*4*2*2*3
##########################################################################################################
### barcode generator
##########################################################################################################
qrcode2rect <- function(qrcode.data, block.x, block.y, coordinates = c(0, 0)) {
### this script is to convert matrix data to barcode image
### qrcode.data is a matrix that is generated by run qr_code(str, dataOutput = T)
### qrcode is a module of the qrcode package
### Sanzhen Liu 3/16/2016
nr <- nrow(qrcode.data)
nc <- ncol(qrcode.data)
for (row in 1:nr) {
for (col in 1:nc) {
if (qrcode.data[row, col]) {
x1 <- coordinates[1] + row * block.x - block.x
y1 <- coordinates[2] + col * block.y - block.y
rect(x1, y1, x1 + block.x, y1 + block.y, border = NA, col = "black")
}
}
}
}
##########################################################################################################
##########################################################################################################
### label printing script
##########################################################################################################
label.print <- function(labcontent, bccontent, is.barcode, xnum, ynum, rowmax, colmax, barcode.size, adj.value = NULL,
page.width, page.height, page.margin.x, page.margin.y, page.num.label, text.cex = 1) {
### print labels
pos <- 0
repeat {
if (pos >= page.num.label & pos < length(labcontent)) {
### if finish a page, start a new page
labcontent <- labcontent[-(1:pos)]
bccontent <-  bccontent[-(1:pos)]
pos <- 0
plot.new()
plot.window(xlim = c(1, colmax), ylim = c(1, rowmax), xaxs = "i", yaxs = "i")
}
###
for (j in ynum[-1]) {
for (i in xnum[-1]) {
pos <- pos + 1
if (pos <= length(labcontent)) {
if (is.null(adj.value)) {
text(i - 0.9, j + 0.2, labcontent[pos], cex = text.cex) ### label
} else {
text(i - 0.9, j + 0.2, labcontent[pos], adj = adj.value, cex = text.cex) ### label
}
if (is.barcode) {
qrcd <- qr_code(bccontent[pos]) ### barcode
width.x <- (colmax - 1) * barcode.size/(page.width - page.margin.x * 2)/nrow(qrcd)
width.y <- (rowmax - 1) * barcode.size/(page.height - page.margin.y * 2)/nrow(qrcd)
qrcode2rect(qrcode.data = qrcd, block.x = width.x, block.y = width.y,
coordinates = c(i - 0.3, j + 0.3))
}
} else {
break
}
}
}
### quit loop if done
if (pos > length(labcontent)) {
break
}
}
}
##########################################################################################################
avery5160 <- function(labdata, bcdata = NULL, byrow = T, barcode = T,
barcode.size = 0.32, page.num.label = 30, adj.value = NULL,
label.cex = 1, outpath = ".", pdfout) {
### labdata is a vector and bcdata is a vector too
### labdata is used to generate the label
### bcdata is used to generate the barcode
### adj.value: one or two values in [0, 1] which specify the x (and optionally y) adjustment of the labels.
###            the value is passed to adj in the "text" function
### If bcdata is not specified, labdata will be used to generate the barcode
### Sanzhen Liu
### 4/16/2016
#######################################################################
### parameters
#######################################################################
colmax <- 3 + 1  ### actually col + 1
rowmax <- 10 + 1  ### actually row + 1
page.width <- 8.5
page.height <- 11
page.margin.x <- 0.512
page.margin.y <- 0.2
#######################################################################
library("qrcode")
### plot
output <- paste0(outpath, "/", pdfout)
pdf(output, width = page.width, height = page.height, pagecentre = F, onefile = T)
par(omi = c(page.margin.x, page.margin.y, page.margin.x, page.margin.y),
mai = c(0, 0, 0, 0))
plot.new()
plot.window(xlim = c(1, colmax), ylim = c(1, rowmax), xaxs = "i", yaxs = "i")
xnum <- 1:colmax
ynum <- rowmax:1
if (is.null(bcdata)) {
bcdata <- labdata
} else {
stopifnot(length(bcdata) == length(labdata)) ### require equal length of two vectors
}
if (byrow) {
label.print(labcontent = labdata, bccontent = bcdata, xnum = xnum, ynum = ynum,
is.barcode = barcode, rowmax = rowmax, colmax = colmax,
barcode.size = barcode.size, adj.value = adj.value,
page.width = page.width, page.height = page.height,
page.margin.x = page.margin.x, page.margin.y = page.margin.y,
page.num.label = page.num.label, text.cex = label.cex)
} else {
label.print(labcontent = labdata, bccontent = bcdata, xnum = xnum, ynum = ynum,
is.barcode = barcode, rowmax = rowmax, colmax = colmax,
barcode.size = barcode.size, adj.value = adj.value,
page.width = page.width, page.height = page.height,
page.margin.x = page.margin.x, page.margin.y = page.margin.y,
page.num.label = page.num.label, text.cex = label.cex)
}
### close device
cat("When print the PDF file, DO remember to select actual size.\n")
dev.off()
}
seeds <- read.delim("/Users/liu3zhen/Downloads/transfer.txt", header=F)
head(seeds)
printinfo <- paste(seeds$V1, seeds$V2, seeds$V3, sep = "\n")
barcodeinfo <- paste(seeds$V1,
seeds$V2,
paste0("PolDate=", seeds$V4),
paste0("Note:", seeds$V3), sep = "\n")
### print labels
avery5160(labdata = printinfo, bcdata = barcodeinfo, adj.value = c(0, 0), barcode.size = 0.01,
outpath = "~/Downloads/", pdfout = "seeds.labels.PDF", label.cex = 1.35)
mut <- c(3.259, 2.976, 2.882); wt <- c(4.163, 4.881, 5.894)
mut <- c(3.3, 3.0, 2.9); wt <- c(4.2, 4.9, 5.9)
t.test(mut, wt)
mut <- c(3.26, 2.98, 2.88); wt <- c(4.16, 4.88, 5.89)
t.test(mut, wt)
mut <- c(3.3, 3.0, 2.9); wt <- c(4.2, 4.9, 5.9)
3.25 	2.94 	2.85 	4.15 	4.86 	5.88
mut <- c(3.25, 2.94, 2.85); wt <- c(4.15, 4.86, 5.88)
t.test(mut, wt)
mut <- c(3.3, 2.9, 2.9); wt <- c(4.2, 4.9, 5.9)
t.test(mut, wt)
(0.9478*553 + 74*0.7143 ) / 627
(62 + 354*0.9973)/416
(62 + 354*0.9973)/487
col2rgb("red")
col2rgb("pink")
pdig <- col2rgb("pink")
pdig[1]
rgb(pdig[1]/255, pdig[2]/255, pdig[3]/255, 0.1)
rgb(pdig[1]/255, pdig[2]/255, pdig[3]/255, 0.2)
rgb(pdig[1]/255, pdig[2]/255, pdig[3]/255, 0.3)
d <- 1:20000000000
s <- sample(d, 1500000)
sum(table(s)>1)
head(table(s))
sum(table(s)>=1)
s <- sample(d, 3000000)
s <- sample(d, 3000000, replace=T)
sum(table(s)>1)
s <- sample(d, 1500000)
ll
c(16, 11, 4, 14)
count <- c(16, 11, 4, 14)
chisq.test(matrix(count, nrow=2, byrow=T))
matrix(count, nrow=2, byrow=T)
clonies <- 1:96
rn <- sample(colines, 300)
clonies <- 1:96
rn <- sample(colines, 300)
colonies <- 1:96
rn <- sample(colonies, 300)
rn <- sample(colonies, 300, replace=T)
unique(rn)
table(rn)
rn <- sample(colonies, 500, replace=T)
unique(rn)
table(rn)
length(unique(rn))
table(rn)
rn <- sample(colonies, 1000, replace=T)
length(unique(rn))
table(rn)
st <- paste0("S", 1:7)
dt <- paste0("D", 1:6)
tt <- paste0("T", 1:2)
talks <- c(st, dt, tt)
preset_talks <- c("D7", "T3", "T4")
talk_random <- sample(talks, length(talk2random))
st <- paste0("S", 1:7)
dt <- paste0("D", 1:6)
tt <- paste0("T", 1:2)
talks <- c(st, dt, tt)
preset_talks <- c("D7", "T3", "T4")
talk_random <- sample(talks, length(talks))
talk_final <- sample(c(preset_talks, talk_random[1])), talk_random[-1])
st <- paste0("S", 1:7)
dt <- paste0("D", 1:6)
tt <- paste0("T", 1:2)
talks <- c(st, dt, tt)
preset_talks <- c("D7", "T3", "T4")
talk_random <- sample(talks, length(talks))
talk_final <- sample(c(preset_talks, talk_random[1])), talk_random[-1]))
may1_talks <- sample(c(preset_talks, talk_random[1]))
talk_final <- c(may1_talks, talk_random[-1])
talk_time <- c(rep("May1am", 4),
rep("May6am", 4),
rep("May6am", 4),
rep("May6pm", 6))
data.frame(Order = 1:length(talk_final),
time = talk_time
talk = talk_final)
data.frame(Order = 1:length(talk_final),
time = talk_time,
talk = talk_final)
getwd()
######################################################
# Project presentation ordering
######################################################
setwd("/Users/liu3zhen/Documents/GitHub/teaching/PLPTH813Bioinformatis/2025/5_project")
source("~/Documents/GitHub/teaching/PLPTH813Bioinformatis/2025/5_project/proj_random.R")
source("~/Documents/GitHub/teaching/PLPTH813Bioinformatis/2025/5_project/proj_random.R")
talk_list <- read.delim("talk.list.txt")
talks_list <- read.delim("talk.list.txt")
talks_out <- merge(talks_final, talks_list, by="Talk")
talks_out
talks_list <- read.delim("talk.list.txt")
talks_out <- merge(talks_final, talks_list, by="Talk")
talks_list <- read.delim("talk.list.txt")
talks_out <- merge(talks_final, talks_list, by="Talk")
talks_out <- merge(talks_final, talks_list, by="talk")
talks_out
write.table(talks_final, "BA25.project.presentation.txt", row.names=F, quote=F, sep="\t")
source("~/Documents/GitHub/teaching/PLPTH813Bioinformatis/2025/5_project/proj_random.R")
source("~/Documents/GitHub/teaching/PLPTH813Bioinformatis/2025/5_project/proj_random.R")
source("~/Documents/GitHub/teaching/PLPTH813Bioinformatis/2025/5_project/proj_random.R")
test <- 1:6
sample(test)
# talks for randomization
st <- paste0("S", 1:7)
dt <- paste0("D", 1:6)
tt <- paste0("T", 1:2)
talks <- c(st, dt, tt)
talks
# prerequested talks on May 1st
preset_talks <- c("D7", "T3", "T4")
# randomization
talk_random <- sample(talks, length(talks))
may1_talks <- sample(c(preset_talks, talk_random[1]))
talk_order <- c(may1_talks, talk_random[-1])
talk_time <- c(rep("May1am", 4),
rep("May6am", 4),
rep("May8am", 4),
rep("May8pm", 6))
talks_final <- data.frame(Order = 1:length(talk_final),
time = talk_time,
talk = talk_order)
# output
talks_list <- read.delim("talk.list.txt")
talks_out <- merge(talks_final, talks_list, by="talk")
talks_out <- talks_out[order(talks_out$Order), ]
write.table(talks_out, "BA25.project.presentation.txt", row.names=F, quote=F, sep="\t")
